#include "stdafx.h"
#include <iostream>
#include <omp.h>
#include <time.h>
using namespace std;
void randomiseMatrix(int** matrix, int n, int m)
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			matrix[i][j] = rand() % 11;
}
int main()
{
	double start, end;
	start = omp_get_wtime();
	srand(time(NULL));
	int n1 = 100;
	int n2 = 50;
	int m1 = 50;
	int m2 = 100;
	int** matrix1;
	int** matrix2;
	matrix1 = new int*[n1];
	for (int i = 0; i < n1; i++)
		matrix1[i] = new int[m1];
	matrix2 = new int*[n2];
	for (int i = 0; i < n2; i++)
		matrix2[i] = new int[m2];
	randomiseMatrix(matrix1, n1, m1);
	randomiseMatrix(matrix2, n2, m2);
	int** result;
	result = new int*[n1];
	for (int i = 0; i < n1; i++)
		result[i] = new int[m2];
	int threadsNum = 2;
	omp_set_num_threads(threadsNum);
	int i, j, k;
#pragma omp parallel for shared(matrix1, matrix2, result) private(i, j, k)
	for (i = 0; i < n1; i++)
		for (j = 0; j < m2; j++)
		{

			for (result[i][j] = 0, k = 0; k < m1; k++)
				result[i][j] += (matrix1[i][k] * matrix2[k][j]);
		}
	for (i = 0; i < n1; i++)
	{
		for (j = 0; j < m2; j++)
			cout << result[i][j] <<" ";
	cout << endl;
	}
	end = omp_get_wtime();
	cout << "Time: " << end - start << endl;
	system("pause");
}

#include "stdafx.h"
#include "iostream"
#include "omp.h"

using namespace std;

int main()
{
	int a, b;
	cout << "Ot: ";
	cin >> a;
	cout << "Do: ";
	cin >> b;
	int n = 1000;
	double h = (double)b*1/n;
	double sum = 0.0, x;
	int i;
#pragma omp parallel num_threads(4) private(i, x) shared(a, b, n, h, sum)
	{
		double lsum = 0;
#pragma omp for
		for (i = 1; i <= n; i++)
		{
			x = (double)(i - 0.5)*h;
			if (x >= a)
			{
				lsum = (double)4 / (1 + x*x);
#pragma omp atomic
				sum += lsum;
			}
		}
		cout << h*sum << endl;
	}
	system("pause");
}
